<?php

namespace {{apiPackage}};

use {{invokerPackage}}\ObjectSerializer;
use ZanPHP\Dubbo\Stub;

{{#operations}}class {{classname}} extends Stub
{
    protected static $__service = "";
    protected static $__methods = [];

{{#operation}}
    /**
     * {{{operationId}}}
{{#summary}}
     *
     * {{{summary}}}
{{/summary}}
     *
{{#description}}
     * {{.}}
     *
{{/description}}
{{#allParams}}
     * @param {{dataType}} ${{paramName}} {{description}} {{#required}}(required){{/required}}{{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
{{/allParams}}
     * @return {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}
     */
    public function {{operationId}}({{#allParams}}${{paramName}}{{^required}} = {{#defaultValue}}'{{{.}}}'{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
    {
        yield setContext("dubbo::generic", "json");
        $args = \Swagger\Client\ObjectSerializer::sanitizeForSerialization({{#allParams}}${{paramName}}{{^required}} = {{#defaultValue}}'{{{.}}}'{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
        $r = (yield $this->__genericCall(__FUNCTION__, $args));
        yield ObjectSerializer::deserialize($r, '{{returnType}}');
    }

    {{/operation}}
}
{{/operations}}
